
#Configure Hibernate in Spring to automatically generate a MySQL schema:
#***********************************************************************
#Properties:
#create - create new schema, drop existing
#create-drop - create schema and drop when SessionFactory is closed (app stops)
#update - update the schema if there are any changes in the entity mappings, existing data persists
#validate - throws exception if tables or columns don't exist
spring.jpa.hibernate.ddl-auto=create

# Environment variables:
#***********************
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${JDBC_USERNAME}
spring.datasource.password=${JDBC_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#H2 database used for development:
#*********************************
#spring.datasource.url=jdbc:h2:mem:shopping-buddy-db
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

#H2 management console (localhost:8080/h2-console):
#*************************************************
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

#Environment variables for localhost in IntelliJ:
#************************************************
#JDBC_DATABASE_URL=jdbc:mysql://localhost:3306/database-name;JDBC_USERNAME=xxx;JDBC_PASSWORD=yyy

#better error messages:
#**********************
spring.jpa.show-sql=false

#Configurations for using Google Identity Platform:
#**************************************************
#Only client-id and client-secret are needed
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_OAUTH2_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_OAUTH2_CLIENT_SECRET}
#Set up resource server to allow authentication by JWT tokens
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://accounts.google.com
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

#Hikari settings:
#****************
#spring.datasource.hikari.maxLifetime property must be lower than the database's wait_timeout
#1 minutes wait time:
spring.datasource.hikari.maxLifeTime : 60000
spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL
#spring.datasource.hikari.connection-timeout=600000
spring.datasource.hikari.maximum-pool-size=20
#spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.minimum-idle=4
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.idle-timeout=30000

# debug http requests
# Now, if you navigate to http://localhost:<port>/actuator/httptrace
#management.endpoints.web.exposure.include=httptrace
#management.httpexchanges.recording.enabled=true

